New Requirements - Use can select to read from web or from file based on user input

(Start with Test Shells first)

Step 1 - Move (alg) Logic to .WordCounting
Step 2 - Setup Http 
    --- no binding for WebClient
Step 3 Create WordCountingEngine ties all the pieces together
    --- ties all the SR pieces together
Step 4 Create UI.Repl
Step 5 Note how we can't create a Repl, implementation of IWordCountEngine is internal, can't access.  Temporary give access now.
Step 6 Update Main().  Highlight manual creation of object graph (poor man DI)
Step 7 Run
Step 8 Write initial unit test
 -- Use [TestCase] to extract input arguments from Test Case
 -- Use SkyKick.Bcl.Extensions to read Embedded Resources
 -- Use MockRepository to create a dynamic proxy object 
 that allows us a number of powerful options.  We can stub
 out fake behaviors, inspect method arguments and a lot more.
 This is your entry point for creating this mocked objects.  It's 
 possible to use concrete objects that have virtual methods, but its
 a hell of a lot easier to use interfaces.  Which is one of the 
 reasons why its good practice to create an interface, 
 even if you will only have one implementation.
 -- Use .Stub (as opposed to .Expect) - provide behavior,
    but don't need to validate it's called
 -- Arg.Is() mostly convienance here, but also validates
    input is passed in correctly
 -- Should library has conienance methods for Asserts

 CheckPoint 1
 -- Introduce Ninject (replaces building object graph)
 Step 9 Create Kernel in UI
     - Add Statup class with a Build Kernel method.  
	    This should NOT be static.
     Kernel should only be accessed from an Entry Point
	 (RoleEntryPoint for Cloud Services, Main in Console
	 Web Apps use a plugin that injects kernel into the 
	 Controller Factory, so you never access it directly)
	 - Call BuildKernel in main

Step 10 Run Program - Note Activation Exception.  Can't find
    IWordCountingEngine.  Because we haven't added a binding for it yet.

Step 11 Add Ninject Module for .WordCounting
        Highlight using NonPublicTypes.  There
		should be no reason to leak concrete implementations
		other than to the Test class that's explicitly testing
		these types.
		Remove .UI from InternalsVisibleTo
        Update BuildKernel()
		   Highlight using full namespace

Step 12 Run Program - Note different Activation Exception  (IWebClient)

Step 13 Lets TDD this problem.  
       Create a Test proving Bindings
	   Verify failure

Step 14 Manual Binding
		WebClientWrapper does not match default naming convention,
		add manual binding

CheckPoint 2

Step 15 Run Bindings Test
     Note, we've made progress, but still getting Activation Exception()
	 But we're closer - missing a binding for SkyKick.Bcl.Logging

Step 16 Adding binding for SkyKick.Bcl.Logging
     we'll add the NinjectModule that comes with that library

Step 17 Run Bindings Test - Confirm that test passes.

Step 18 Run UI - Confirm application works

Step 19 Clean up WordCountingEngineTests
     We can use a kernel instead of creating
	 WordCountingEngine manually
	 - Show use of .ReBind() - ninject alreadys has a binding, 
	 we need to replace it.
	 - .ToContant allows us to bind to an existing instance rather
	 than a type that Ninject will control creating.
	 - Highlihgt importance of .BuildKernel creating a new instance
	 every time.  Because we are manipulating bindings we need
	 to make sure we have a fresh instance, otherwise we could be polluting
	 other tests, or other tests could have polluted us by chaning bindings.
	 - Confirm test works

Check Point 3

The core prototype "works", has been converted to use SOLID principles and
we have 86% code coverage of .WordCounting.

But the core algorithm is not very good.  Lets prove it's not as robust as
it could be by adding a failing a test.  This is TDD style, we've found a bug
so first lets verify we can reproduce the bad behavior

   Step 20 Add WordsWithEntersAndNoSpaces
       Be sure to mark as embedded resource

   Step 21 Add new input file to CountsWordsInSampleFilesCorrectly
       Verify test fails

	Step 22  Update Word Counting Algorithm - very simple/naive fix

	Step 23 Re run CountsWordsInSampleFilesCorrectly and verify bug is fixed

Check Point 4



 Step X - Singleton - add a delay and initialization in WebClient to simulate a 
         auth handshake.  Run Program note how delay occurs every time.
		  Add Singleton() notice how delay only happens once.
 